//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3051-7314-20                      |
// |                       Markus Fritze, personal use                       |
// +-------------------------------------------------------------------------+
//
//
//      This file contains the user-defined type definitions.
//      To use it press F2 in IDA and enter the name of this file.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();
	set_inf_attr(INF_LOW_OFF, 0x20);
	set_inf_attr(INF_HIGH_OFF, 0xFFFFFF00);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("XCPB");
	id = get_struc_id("CPXINFO");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"XCPB",0);
	id = add_struc(-1,"CPXINFO",0);
	
	id = get_struc_id("XCPB");
	mid = add_struc_member(id,"handle",	0,	0x10000400,	-1,	2);
	set_member_cmt(id,	0,	"From XControl's Graf_Handle() Call. See the Notes on workstations below.",	1);
	mid = add_struc_member(id,"booting",	0X2,	0x10000400,	-1,	2);
	set_member_cmt(id,	0X2,	"Non-zero if this cpx_init() call is part of XControl's initialization.",	1);
	mid = add_struc_member(id,"reserved",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SkipRsh_Fix",	0X6,	0x10000400,	-1,	2);
	set_member_cmt(id,	0X6,	"The cpx must call the resource fixup routine only once.  Non-zero means skip the fixup.",	1);
	mid = add_struc_member(id,"reserve1",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserve2",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rsh_fix",	0X10,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X10,	"void    (*rsh_fix)( int num_objs, int num_frstr, int num_frimg, int num_tree, OBJECT *rs_object, TEDINFO *rs_tedinfo, BYTE *rs_strings[], ICONBLK *rs_iconblk, BITBLK *rs_bitblk, long *rs_frstr, long *rs_frimg, long *rs_trindex, struct foobar *rs_imdope );",	1);
	mid = add_struc_member(id,"rsh_obfix",	0X14,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X14,	"void    (*rsh_obfix)( OBJECT *tree, int curob );",	1);
	mid = add_struc_member(id,"Popup",	0X18,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X18,	"short   (*Popup)( char *items[], int num_items, int default_item,\n              int font_size, GRECT *button, GRECT *world );",	1);
	mid = add_struc_member(id,"Sl_size",	0X1C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X1C,	"void    (*Sl_size)( OBJECT *tree, int base, int slider, int num_items, int visible, int direction, int min_size );",	1);
	mid = add_struc_member(id,"Sl_x",	0X20,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X20,	"void    ( *Sl_x) ( OBJECT *tree, int base, int slider, int value, int num_min, int num_max, void (*foo)() );",	1);
	mid = add_struc_member(id,"Sl_y",	0X24,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X24,	"void    (*Sl_y)( OBJECT *tree, int base, int slider,  int value, int num_min, int num_max, void (*foo)() );",	1);
	mid = add_struc_member(id,"Sl_arrow",	0X28,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X28,	"void    (*Sl_arrow)( OBJECT *tree, int base, int slider, int obj, int inc, int min, int max, int *numvar, int direction, void (*foo)() );",	1);
	mid = add_struc_member(id,"Sl_dragx",	0X2C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X2C,	"void    (*Sl_dragx)( OBJECT *tree, int base, int slider, int min, int max, int *numvar, void (*foo)() );",	1);
	mid = add_struc_member(id,"Sl_dragy",	0X30,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X30,	"void    (*Sl_dragy)( OBJECT *tree, int base, int slider,  int min, int max, int *numvar, void (*foo)() );",	1);
	mid = add_struc_member(id,"Xform_do",	0X34,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X34,	"WORD    (*Xform_do)( Object *tree, WORD start_field, WORD puntmsg[] );",	1);
	mid = add_struc_member(id,"GetFirstRect",	0X38,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X38,	"GRECT   *(*GetFirstRect)( GRECT *prect );",	1);
	mid = add_struc_member(id,"GetNextRext",	0X3C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X3C,	"GRECT   *(*GetNextRext)( void );",	1);
	mid = add_struc_member(id,"Set_Evnt_Mask",	0X40,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X40,	"void    (*Set_Evnt_Mask)( int mask, MOBLK *m1, MOBLK *m2, long time );",	1);
	mid = add_struc_member(id,"XGen_Alert",	0X44,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X44,	"BOOLEAN  (*XGen_Alert)( int id );",	1);
	mid = add_struc_member(id,"CPX_Save",	0X48,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X48,	"BOOLEAN  (*CPX_Save)( void *ptr, long num );",	1);
	mid = add_struc_member(id,"Get_Buffer",	0X4C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4C,	"void    *(*Get_Buffer)( void );",	1);
	mid = add_struc_member(id,"getcookie",	0X50,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X50,	"int (*getcookie)( long cookie, long *p_value );",	1);
	mid = add_struc_member(id,"Country_Code",	0X54,	0x10000400,	-1,	2);
	set_member_cmt(id,	0X54,	"Contains the Country Code that the Control Panel was compiled for. For a list of the Current Country Codes, please see the Rainbow TOS Release Notes - BIOS/XBIOS Supplemental Documentation, page 63.",	1);
	mid = add_struc_member(id,"MFsave",	0X56,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X56,	"void    MFsave(  BOOLEAN saveit, MFORM *mf );",	1);
	
	id = get_struc_id("CPXINFO");
	mid = add_struc_member(id,"cpx_call",	0,	0x20000400,	-1,	4);
	set_member_cmt(id,	0,	"BOOLEAN (*cpx_call)( GRECT *work );",	1);
	mid = add_struc_member(id,"cpx_draw",	0X4,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X4,	"void    (*cpx_draw)( GRECT *clip );",	1);
	mid = add_struc_member(id,"cpx_wmove",	0X8,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X8,	"void    (*cpx_wmove)( GRECT *work );",	1);
	mid = add_struc_member(id,"cpx_timer",	0XC,	0x20000400,	-1,	4);
	set_member_cmt(id,	0XC,	"void    (*cpx_timer)( int *event );",	1);
	mid = add_struc_member(id,"cpx_key",	0X10,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X10,	"void    (*cpx_key)( int kstate, int key, int *event );",	1);
	mid = add_struc_member(id,"cpx_button",	0X14,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X14,	"void    (*cpx_button)( MRETS *mrets, int nclicks, int *event );",	1);
	mid = add_struc_member(id,"cpx_m1",	0X18,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X18,	"void    (*cpx_m1)( MRETS *mrets, int *event );",	1);
	mid = add_struc_member(id,"cpx_m2",	0X1C,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X1C,	"void    (*cpx_m2)( MRETS *mrets, int *event );",	1);
	mid = add_struc_member(id,"cpx_hook",	0X20,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X20,	"BOOLEAN (*cpx_hook)( int event, int *msg, MRETS *mrets, int *key, int *nclicks);",	1);
	mid = add_struc_member(id,"cpx_close",	0X24,	0x20000400,	-1,	4);
	set_member_cmt(id,	0X24,	"void    (*cpx_close)(  BOOLEAN flag );",	1);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
        end_type_updating(UTP_STRUCT);
}

// End of file.
